#!/usr/bin/env bash
set -e

IFS= read -r header

index=0

init_suite() {
  count=0
  failures=0
  skipped=0
  suitetest_exec_time=0
  start_time=0
  stop_time=0
  name=""
  _buffer=""
}

header() {
    printf "\
<?xml version='1.0'?>
<ns2:test-suite xmlns:ns2='urn:model.allure.qatools.yandex.ru' start=\'${start_time}\' stop=\'${stop_time}\'>
    <name>${class}</name>
    <title>${class}</title>
    <test-cases>\n"
}

footer() {
    printf "\
    </test-cases>
</ns2:test-suite>\n"
}

pass() {
    printf "\
        <test-case start=\'${start_time}\' status='passed' stop=\'${stop_time}\'>
            <name>${name}</name>
            <title>${name}</title>
            <labels>
                <label name='feature' value=\'${name}\'/>
            </labels>
            <parameters>
                <parameter kind='environment-variable' name='icp.url' value='https://9.111.255.15:8443'/>
            </parameters>
            <steps/>
            <attachments/>
            <description type='markdown'>[Link to Logs](../)</description>
        </test-case>
        \n"
}

fail() {
    printf "\
        <test-case start=\'${start_time}\' status='failed' stop=\'${stop_time}\'>
            <name>${name}</name>
            <title>${name}</title>
            <labels>
                <label name='feature' value=\'${name}\'/>
            </labels>
            <parameters>
                <parameter kind='environment-variable' name='icp.url' value='https://9.111.255.15:8443'/>
            </parameters>
            <steps/>
            <attachments/>
            <failure>
              <message>Failed: ############# FAILED while ${name} #####################</message>
              <stack-trace>Error: Failed: ############# FAILED while ${name} #####################
                  "
                  echo "${1}"
                  printf "
              </stack-trace>
            </failure>
            <description type='markdown'>[Link to Logs](../)</description>
        </test-case>
        \n"
}

skip() {
    echo "\
    <testcase classname=\"${class}\" name=\"${name}\" time=\"${test_exec_time}\">
        <skipped>$1</skipped>
    </testcase>\n"
}

buffer() {
  _buffer="${_buffer}$("$@")"
}

flush() {
  echo "${_buffer}"
  _buffer=""
}

_buffer_log=""
log() {
  _buffer_log="${_buffer_log}
$1"
}

flush_log() {
  if [[ -n "${_buffer_log}" ]]; then
    buffer fail "${_buffer_log}"
    _buffer_log=""
  fi
}

finish_suite() {
  [[ ${count} -gt 0 ]] && {
    (
      flush_log
      header
      flush
      footer
    ) > ./report/"${class-case}-testsuite.xml"
  }
  init_suite
}

trap finish_suite EXIT

while IFS= read -r line; do
  case "$line" in
  "suite "*)
    flush_log
    finish_suite
    suite_expr="suite (.*)"
    if [[ "$line" =~ $suite_expr ]]; then
      class="${BASH_REMATCH[1]}"
    fi
    ;;
  "begin "* )
    flush_log
    let index+=1
    name="${line#* $index }"
    ;;
  "ok "* )
    let count+=1
    expr_ok="ok $index .* in ([0-9]+)sec"
    expr_skip="ok $index # skip (.*)"
    if [[ "$line" =~ $expr_skip ]]; then
      let skipped+=1
      test_exec_time=0
      buffer skip "${BASH_REMATCH[1]}"
    elif [[ "$line" =~ $expr_ok ]]; then
      test_exec_time="${BASH_REMATCH[1]}"
      suitetest_exec_time=$((suitetest_exec_time + test_exec_time))
      buffer pass
    else
      log "Wrong output format: ${line}"
      let failures+=1
    fi
    ;;
  "not ok "* )
    let count+=1
    let failures+=1
    expr_notok="not ok $index .* in ([0-9]+)sec"
    if [[ "$line" =~ $expr_notok ]]; then
      test_exec_time="${BASH_REMATCH[1]}"
      suitetest_exec_time=$((suitetest_exec_time + test_exec_time))
    fi
    ;;
  "# "* )
    log "${line:2}"
    ;;
  esac
done
